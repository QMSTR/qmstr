name: Build, push, and deploy
on: push

env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: qmstr-dev
  GKE_ZONE: europe-west3-a
  GOBUILDER_IMAGE: "golang:1.12-buster"

jobs:

  build-master:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=endocodeci/qmstr-master
          TAGS="${DOCKER_IMAGE}:sha-${GITHUB_SHA::7}"
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/qmstr-master/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

  build-client:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=endocodeci/qmstr-client
          DOCKER_IMAGE_MVN=endocodeci/qmstr-client-mvn
          TAGS="${DOCKER_IMAGE}:sha-${GITHUB_SHA::7}"
          TAGS_MVN="${DOCKER_IMAGE_MVN}:sha-${GITHUB_SHA::7}"
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=tags-mvn::${TAGS_MVN}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push base client
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/qmstr-client/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
      - name: Build and push Maven client
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/qmstr-client/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags-mvn }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

  build-init-containers:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=endocodeci/pom-patch
          TAGS="${DOCKER_IMAGE}:sha-${GITHUB_SHA::7}"
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/init/pom-patch/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

  deploy-to-dev:
    runs-on: ubuntu-latest
    needs: [ build-master, build-client, build-init-containers ]
    steps:
      - name: Checkout VCS
        uses: actions/checkout@master
      - name: Setup Google SDK
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '270.0.0'
          service_account_email: ${{ secrets.SA_EMAIL_DEPLOY_QMSTR_DEV }}
          service_account_key: ${{ secrets.SA_KEY_DEPLOY_QMSTR_DEV }}
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@master
        with:
          kustomize-version: "3.2.1"
      - name: Make kustomize executable
        run: chmod +x /opt/hostedtoolcache/kustomize/3.2.1/x64/kustomize
      - name: Deploy to Dev Cluster
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER \
          --zone $GKE_ZONE --project $GKE_PROJECT
          cd ./deploy
          export SHA_TAG="sha-${GITHUB_SHA::7}"
          export NAMESPACE="qmstr-$SHA_TAG"
          kubectl create namespace $NAMESPACE
          kustomize edit set namespace $NAMESPACE
          kustomize edit set image endocodeci/qmstr-master:$SHA_TAG
          kustomize edit set image endocodeci/qmstr-client-mvn:$SHA_TAG
          kustomize edit set image endocodeci/pom-patch:$SHA_TAG
          kubectl apply -k .

