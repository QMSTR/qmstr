// Code generated by protoc-gen-go. DO NOT EDIT.
// source: analyzerservice.proto

package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AnalyzerConfigRequest struct {
	AnalyzerID           int32    `protobuf:"varint,1,opt,name=analyzerID,proto3" json:"analyzerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnalyzerConfigRequest) Reset()         { *m = AnalyzerConfigRequest{} }
func (m *AnalyzerConfigRequest) String() string { return proto.CompactTextString(m) }
func (*AnalyzerConfigRequest) ProtoMessage()    {}
func (*AnalyzerConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_analyzerservice_c41d0c00165a35a3, []int{0}
}
func (m *AnalyzerConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyzerConfigRequest.Unmarshal(m, b)
}
func (m *AnalyzerConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyzerConfigRequest.Marshal(b, m, deterministic)
}
func (dst *AnalyzerConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzerConfigRequest.Merge(dst, src)
}
func (m *AnalyzerConfigRequest) XXX_Size() int {
	return xxx_messageInfo_AnalyzerConfigRequest.Size(m)
}
func (m *AnalyzerConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzerConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzerConfigRequest proto.InternalMessageInfo

func (m *AnalyzerConfigRequest) GetAnalyzerID() int32 {
	if m != nil {
		return m.AnalyzerID
	}
	return 0
}

type AnalyzerConfigResponse struct {
	ConfigMap            map[string]string   `protobuf:"bytes,2,rep,name=configMap,proto3" json:"configMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PathSub              []*PathSubstitution `protobuf:"bytes,3,rep,name=pathSub,proto3" json:"pathSub,omitempty"`
	Token                int64               `protobuf:"varint,4,opt,name=token,proto3" json:"token,omitempty"`
	Name                 string              `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *AnalyzerConfigResponse) Reset()         { *m = AnalyzerConfigResponse{} }
func (m *AnalyzerConfigResponse) String() string { return proto.CompactTextString(m) }
func (*AnalyzerConfigResponse) ProtoMessage()    {}
func (*AnalyzerConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_analyzerservice_c41d0c00165a35a3, []int{1}
}
func (m *AnalyzerConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyzerConfigResponse.Unmarshal(m, b)
}
func (m *AnalyzerConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyzerConfigResponse.Marshal(b, m, deterministic)
}
func (dst *AnalyzerConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzerConfigResponse.Merge(dst, src)
}
func (m *AnalyzerConfigResponse) XXX_Size() int {
	return xxx_messageInfo_AnalyzerConfigResponse.Size(m)
}
func (m *AnalyzerConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzerConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzerConfigResponse proto.InternalMessageInfo

func (m *AnalyzerConfigResponse) GetConfigMap() map[string]string {
	if m != nil {
		return m.ConfigMap
	}
	return nil
}

func (m *AnalyzerConfigResponse) GetPathSub() []*PathSubstitution {
	if m != nil {
		return m.PathSub
	}
	return nil
}

func (m *AnalyzerConfigResponse) GetToken() int64 {
	if m != nil {
		return m.Token
	}
	return 0
}

func (m *AnalyzerConfigResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type InfoNodeMessage struct {
	Token                int64     `protobuf:"varint,1,opt,name=token,proto3" json:"token,omitempty"`
	Uid                  string    `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Infonode             *InfoNode `protobuf:"bytes,3,opt,name=infonode,proto3" json:"infonode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *InfoNodeMessage) Reset()         { *m = InfoNodeMessage{} }
func (m *InfoNodeMessage) String() string { return proto.CompactTextString(m) }
func (*InfoNodeMessage) ProtoMessage()    {}
func (*InfoNodeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_analyzerservice_c41d0c00165a35a3, []int{2}
}
func (m *InfoNodeMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoNodeMessage.Unmarshal(m, b)
}
func (m *InfoNodeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoNodeMessage.Marshal(b, m, deterministic)
}
func (dst *InfoNodeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoNodeMessage.Merge(dst, src)
}
func (m *InfoNodeMessage) XXX_Size() int {
	return xxx_messageInfo_InfoNodeMessage.Size(m)
}
func (m *InfoNodeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoNodeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_InfoNodeMessage proto.InternalMessageInfo

func (m *InfoNodeMessage) GetToken() int64 {
	if m != nil {
		return m.Token
	}
	return 0
}

func (m *InfoNodeMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *InfoNodeMessage) GetInfonode() *InfoNode {
	if m != nil {
		return m.Infonode
	}
	return nil
}

type FileNodeMessage struct {
	Token                int64     `protobuf:"varint,1,opt,name=token,proto3" json:"token,omitempty"`
	Filenode             *FileNode `protobuf:"bytes,2,opt,name=filenode,proto3" json:"filenode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FileNodeMessage) Reset()         { *m = FileNodeMessage{} }
func (m *FileNodeMessage) String() string { return proto.CompactTextString(m) }
func (*FileNodeMessage) ProtoMessage()    {}
func (*FileNodeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_analyzerservice_c41d0c00165a35a3, []int{3}
}
func (m *FileNodeMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileNodeMessage.Unmarshal(m, b)
}
func (m *FileNodeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileNodeMessage.Marshal(b, m, deterministic)
}
func (dst *FileNodeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileNodeMessage.Merge(dst, src)
}
func (m *FileNodeMessage) XXX_Size() int {
	return xxx_messageInfo_FileNodeMessage.Size(m)
}
func (m *FileNodeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FileNodeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FileNodeMessage proto.InternalMessageInfo

func (m *FileNodeMessage) GetToken() int64 {
	if m != nil {
		return m.Token
	}
	return 0
}

func (m *FileNodeMessage) GetFilenode() *FileNode {
	if m != nil {
		return m.Filenode
	}
	return nil
}

type PackageNodeMessage struct {
	Token                int64        `protobuf:"varint,1,opt,name=token,proto3" json:"token,omitempty"`
	Packagenode          *PackageNode `protobuf:"bytes,2,opt,name=packagenode,proto3" json:"packagenode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PackageNodeMessage) Reset()         { *m = PackageNodeMessage{} }
func (m *PackageNodeMessage) String() string { return proto.CompactTextString(m) }
func (*PackageNodeMessage) ProtoMessage()    {}
func (*PackageNodeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_analyzerservice_c41d0c00165a35a3, []int{4}
}
func (m *PackageNodeMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackageNodeMessage.Unmarshal(m, b)
}
func (m *PackageNodeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackageNodeMessage.Marshal(b, m, deterministic)
}
func (dst *PackageNodeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageNodeMessage.Merge(dst, src)
}
func (m *PackageNodeMessage) XXX_Size() int {
	return xxx_messageInfo_PackageNodeMessage.Size(m)
}
func (m *PackageNodeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageNodeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PackageNodeMessage proto.InternalMessageInfo

func (m *PackageNodeMessage) GetToken() int64 {
	if m != nil {
		return m.Token
	}
	return 0
}

func (m *PackageNodeMessage) GetPackagenode() *PackageNode {
	if m != nil {
		return m.Packagenode
	}
	return nil
}

type DiagnosticNodeMessage struct {
	Token                int64           `protobuf:"varint,1,opt,name=token,proto3" json:"token,omitempty"`
	Uid                  string          `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Diagnosticnode       *DiagnosticNode `protobuf:"bytes,3,opt,name=diagnosticnode,proto3" json:"diagnosticnode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DiagnosticNodeMessage) Reset()         { *m = DiagnosticNodeMessage{} }
func (m *DiagnosticNodeMessage) String() string { return proto.CompactTextString(m) }
func (*DiagnosticNodeMessage) ProtoMessage()    {}
func (*DiagnosticNodeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_analyzerservice_c41d0c00165a35a3, []int{5}
}
func (m *DiagnosticNodeMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiagnosticNodeMessage.Unmarshal(m, b)
}
func (m *DiagnosticNodeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiagnosticNodeMessage.Marshal(b, m, deterministic)
}
func (dst *DiagnosticNodeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiagnosticNodeMessage.Merge(dst, src)
}
func (m *DiagnosticNodeMessage) XXX_Size() int {
	return xxx_messageInfo_DiagnosticNodeMessage.Size(m)
}
func (m *DiagnosticNodeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DiagnosticNodeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DiagnosticNodeMessage proto.InternalMessageInfo

func (m *DiagnosticNodeMessage) GetToken() int64 {
	if m != nil {
		return m.Token
	}
	return 0
}

func (m *DiagnosticNodeMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *DiagnosticNodeMessage) GetDiagnosticnode() *DiagnosticNode {
	if m != nil {
		return m.Diagnosticnode
	}
	return nil
}

type SendResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendResponse) Reset()         { *m = SendResponse{} }
func (m *SendResponse) String() string { return proto.CompactTextString(m) }
func (*SendResponse) ProtoMessage()    {}
func (*SendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_analyzerservice_c41d0c00165a35a3, []int{6}
}
func (m *SendResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendResponse.Unmarshal(m, b)
}
func (m *SendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendResponse.Marshal(b, m, deterministic)
}
func (dst *SendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendResponse.Merge(dst, src)
}
func (m *SendResponse) XXX_Size() int {
	return xxx_messageInfo_SendResponse.Size(m)
}
func (m *SendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendResponse proto.InternalMessageInfo

func (m *SendResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*AnalyzerConfigRequest)(nil), "service.AnalyzerConfigRequest")
	proto.RegisterType((*AnalyzerConfigResponse)(nil), "service.AnalyzerConfigResponse")
	proto.RegisterMapType((map[string]string)(nil), "service.AnalyzerConfigResponse.ConfigMapEntry")
	proto.RegisterType((*InfoNodeMessage)(nil), "service.InfoNodeMessage")
	proto.RegisterType((*FileNodeMessage)(nil), "service.FileNodeMessage")
	proto.RegisterType((*PackageNodeMessage)(nil), "service.PackageNodeMessage")
	proto.RegisterType((*DiagnosticNodeMessage)(nil), "service.DiagnosticNodeMessage")
	proto.RegisterType((*SendResponse)(nil), "service.SendResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AnalysisServiceClient is the client API for AnalysisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnalysisServiceClient interface {
	GetAnalyzerConfig(ctx context.Context, in *AnalyzerConfigRequest, opts ...grpc.CallOption) (*AnalyzerConfigResponse, error)
	SendInfoNodes(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_SendInfoNodesClient, error)
	SendFileNode(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_SendFileNodeClient, error)
	SendPackageNode(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_SendPackageNodeClient, error)
	SendDiagnosticNode(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_SendDiagnosticNodeClient, error)
}

type analysisServiceClient struct {
	cc *grpc.ClientConn
}

func NewAnalysisServiceClient(cc *grpc.ClientConn) AnalysisServiceClient {
	return &analysisServiceClient{cc}
}

func (c *analysisServiceClient) GetAnalyzerConfig(ctx context.Context, in *AnalyzerConfigRequest, opts ...grpc.CallOption) (*AnalyzerConfigResponse, error) {
	out := new(AnalyzerConfigResponse)
	err := c.cc.Invoke(ctx, "/service.AnalysisService/GetAnalyzerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisServiceClient) SendInfoNodes(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_SendInfoNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnalysisService_serviceDesc.Streams[0], "/service.AnalysisService/SendInfoNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &analysisServiceSendInfoNodesClient{stream}
	return x, nil
}

type AnalysisService_SendInfoNodesClient interface {
	Send(*InfoNodeMessage) error
	CloseAndRecv() (*SendResponse, error)
	grpc.ClientStream
}

type analysisServiceSendInfoNodesClient struct {
	grpc.ClientStream
}

func (x *analysisServiceSendInfoNodesClient) Send(m *InfoNodeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *analysisServiceSendInfoNodesClient) CloseAndRecv() (*SendResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *analysisServiceClient) SendFileNode(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_SendFileNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnalysisService_serviceDesc.Streams[1], "/service.AnalysisService/SendFileNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &analysisServiceSendFileNodeClient{stream}
	return x, nil
}

type AnalysisService_SendFileNodeClient interface {
	Send(*FileNodeMessage) error
	CloseAndRecv() (*SendResponse, error)
	grpc.ClientStream
}

type analysisServiceSendFileNodeClient struct {
	grpc.ClientStream
}

func (x *analysisServiceSendFileNodeClient) Send(m *FileNodeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *analysisServiceSendFileNodeClient) CloseAndRecv() (*SendResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *analysisServiceClient) SendPackageNode(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_SendPackageNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnalysisService_serviceDesc.Streams[2], "/service.AnalysisService/SendPackageNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &analysisServiceSendPackageNodeClient{stream}
	return x, nil
}

type AnalysisService_SendPackageNodeClient interface {
	Send(*PackageNodeMessage) error
	CloseAndRecv() (*SendResponse, error)
	grpc.ClientStream
}

type analysisServiceSendPackageNodeClient struct {
	grpc.ClientStream
}

func (x *analysisServiceSendPackageNodeClient) Send(m *PackageNodeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *analysisServiceSendPackageNodeClient) CloseAndRecv() (*SendResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *analysisServiceClient) SendDiagnosticNode(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_SendDiagnosticNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnalysisService_serviceDesc.Streams[3], "/service.AnalysisService/SendDiagnosticNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &analysisServiceSendDiagnosticNodeClient{stream}
	return x, nil
}

type AnalysisService_SendDiagnosticNodeClient interface {
	Send(*DiagnosticNodeMessage) error
	CloseAndRecv() (*SendResponse, error)
	grpc.ClientStream
}

type analysisServiceSendDiagnosticNodeClient struct {
	grpc.ClientStream
}

func (x *analysisServiceSendDiagnosticNodeClient) Send(m *DiagnosticNodeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *analysisServiceSendDiagnosticNodeClient) CloseAndRecv() (*SendResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnalysisServiceServer is the server API for AnalysisService service.
type AnalysisServiceServer interface {
	GetAnalyzerConfig(context.Context, *AnalyzerConfigRequest) (*AnalyzerConfigResponse, error)
	SendInfoNodes(AnalysisService_SendInfoNodesServer) error
	SendFileNode(AnalysisService_SendFileNodeServer) error
	SendPackageNode(AnalysisService_SendPackageNodeServer) error
	SendDiagnosticNode(AnalysisService_SendDiagnosticNodeServer) error
}

func RegisterAnalysisServiceServer(s *grpc.Server, srv AnalysisServiceServer) {
	s.RegisterService(&_AnalysisService_serviceDesc, srv)
}

func _AnalysisService_GetAnalyzerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServiceServer).GetAnalyzerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AnalysisService/GetAnalyzerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServiceServer).GetAnalyzerConfig(ctx, req.(*AnalyzerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisService_SendInfoNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnalysisServiceServer).SendInfoNodes(&analysisServiceSendInfoNodesServer{stream})
}

type AnalysisService_SendInfoNodesServer interface {
	SendAndClose(*SendResponse) error
	Recv() (*InfoNodeMessage, error)
	grpc.ServerStream
}

type analysisServiceSendInfoNodesServer struct {
	grpc.ServerStream
}

func (x *analysisServiceSendInfoNodesServer) SendAndClose(m *SendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *analysisServiceSendInfoNodesServer) Recv() (*InfoNodeMessage, error) {
	m := new(InfoNodeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AnalysisService_SendFileNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnalysisServiceServer).SendFileNode(&analysisServiceSendFileNodeServer{stream})
}

type AnalysisService_SendFileNodeServer interface {
	SendAndClose(*SendResponse) error
	Recv() (*FileNodeMessage, error)
	grpc.ServerStream
}

type analysisServiceSendFileNodeServer struct {
	grpc.ServerStream
}

func (x *analysisServiceSendFileNodeServer) SendAndClose(m *SendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *analysisServiceSendFileNodeServer) Recv() (*FileNodeMessage, error) {
	m := new(FileNodeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AnalysisService_SendPackageNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnalysisServiceServer).SendPackageNode(&analysisServiceSendPackageNodeServer{stream})
}

type AnalysisService_SendPackageNodeServer interface {
	SendAndClose(*SendResponse) error
	Recv() (*PackageNodeMessage, error)
	grpc.ServerStream
}

type analysisServiceSendPackageNodeServer struct {
	grpc.ServerStream
}

func (x *analysisServiceSendPackageNodeServer) SendAndClose(m *SendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *analysisServiceSendPackageNodeServer) Recv() (*PackageNodeMessage, error) {
	m := new(PackageNodeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AnalysisService_SendDiagnosticNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnalysisServiceServer).SendDiagnosticNode(&analysisServiceSendDiagnosticNodeServer{stream})
}

type AnalysisService_SendDiagnosticNodeServer interface {
	SendAndClose(*SendResponse) error
	Recv() (*DiagnosticNodeMessage, error)
	grpc.ServerStream
}

type analysisServiceSendDiagnosticNodeServer struct {
	grpc.ServerStream
}

func (x *analysisServiceSendDiagnosticNodeServer) SendAndClose(m *SendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *analysisServiceSendDiagnosticNodeServer) Recv() (*DiagnosticNodeMessage, error) {
	m := new(DiagnosticNodeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AnalysisService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.AnalysisService",
	HandlerType: (*AnalysisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnalyzerConfig",
			Handler:    _AnalysisService_GetAnalyzerConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendInfoNodes",
			Handler:       _AnalysisService_SendInfoNodes_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendFileNode",
			Handler:       _AnalysisService_SendFileNode_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendPackageNode",
			Handler:       _AnalysisService_SendPackageNode_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendDiagnosticNode",
			Handler:       _AnalysisService_SendDiagnosticNode_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "analyzerservice.proto",
}

func init() {
	proto.RegisterFile("analyzerservice.proto", fileDescriptor_analyzerservice_c41d0c00165a35a3)
}

var fileDescriptor_analyzerservice_c41d0c00165a35a3 = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x51, 0x6f, 0xd3, 0x30,
	0x10, 0xc7, 0x9b, 0x66, 0x5b, 0xdb, 0x2b, 0xac, 0x9b, 0xb5, 0x8e, 0x50, 0xa4, 0x51, 0xe5, 0x29,
	0x2f, 0xcb, 0x43, 0x27, 0x01, 0x42, 0x48, 0x08, 0x5a, 0x40, 0x95, 0x18, 0x4c, 0xae, 0x34, 0xf1,
	0xea, 0x26, 0xd7, 0xcc, 0x6a, 0x6a, 0x67, 0xb1, 0x33, 0xa9, 0x3c, 0x21, 0xf1, 0x05, 0xf8, 0xc8,
	0x28, 0x49, 0x93, 0xa5, 0xa5, 0x6c, 0xd3, 0xde, 0x7c, 0xe7, 0xbb, 0xdf, 0xf9, 0xee, 0xfe, 0x09,
	0x74, 0x99, 0x60, 0xe1, 0xf2, 0x27, 0xc6, 0x0a, 0xe3, 0x1b, 0xee, 0xa1, 0x1b, 0xc5, 0x52, 0x4b,
	0xd2, 0x58, 0x99, 0xbd, 0x8e, 0xcf, 0x34, 0x5b, 0x48, 0x1f, 0xc3, 0xfc, 0xc6, 0x7e, 0x0d, 0xdd,
	0x0f, 0xab, 0x94, 0xa1, 0x14, 0x33, 0x1e, 0x50, 0xbc, 0x4e, 0x50, 0x69, 0x72, 0x02, 0x50, 0xb0,
	0xc6, 0x23, 0xcb, 0xe8, 0x1b, 0xce, 0x2e, 0xad, 0x78, 0xec, 0xdf, 0x75, 0x38, 0xde, 0xcc, 0x54,
	0x91, 0x14, 0x0a, 0xc9, 0x57, 0x68, 0x79, 0x99, 0xe7, 0x9c, 0x45, 0x56, 0xbd, 0x6f, 0x3a, 0xed,
	0x81, 0xeb, 0x16, 0x0f, 0xda, 0x9e, 0xe3, 0x0e, 0x8b, 0x84, 0x4f, 0x42, 0xc7, 0x4b, 0x7a, 0x0b,
	0x20, 0x67, 0xd0, 0x88, 0x98, 0xbe, 0x9a, 0x24, 0x53, 0xcb, 0xcc, 0x58, 0xcf, 0x4b, 0xd6, 0x45,
	0xee, 0x57, 0x9a, 0xeb, 0x44, 0x73, 0x29, 0x68, 0x11, 0x49, 0x8e, 0x60, 0x57, 0xcb, 0x39, 0x0a,
	0x6b, 0xa7, 0x6f, 0x38, 0x26, 0xcd, 0x0d, 0x42, 0x60, 0x47, 0xb0, 0x05, 0x5a, 0x7b, 0x7d, 0xc3,
	0x69, 0xd1, 0xec, 0xdc, 0x7b, 0x07, 0xfb, 0xeb, 0xb5, 0xc9, 0x01, 0x98, 0x73, 0x5c, 0x66, 0x2d,
	0xb7, 0x68, 0x7a, 0x4c, 0x69, 0x37, 0x2c, 0x4c, 0xd0, 0xaa, 0x67, 0xbe, 0xdc, 0x78, 0x5b, 0x7f,
	0x63, 0xd8, 0x57, 0xd0, 0x19, 0x8b, 0x99, 0xfc, 0x26, 0x7d, 0x3c, 0x47, 0xa5, 0x58, 0x80, 0xb7,
	0xa5, 0x8d, 0x6a, 0xe9, 0x03, 0x30, 0x13, 0xee, 0xaf, 0x00, 0xe9, 0x91, 0x9c, 0x42, 0x93, 0x8b,
	0x99, 0x14, 0xd2, 0x47, 0xcb, 0xec, 0x1b, 0x4e, 0x7b, 0x70, 0x58, 0x36, 0x56, 0x30, 0x69, 0x19,
	0x62, 0x5f, 0x42, 0xe7, 0x33, 0x0f, 0xf1, 0xfe, 0x4a, 0xa7, 0xd0, 0x9c, 0xf1, 0x10, 0x33, 0x6e,
	0x7d, 0x83, 0x5b, 0x10, 0x68, 0x19, 0x62, 0x4f, 0x81, 0x5c, 0x30, 0x6f, 0xce, 0x82, 0x07, 0xa0,
	0x5f, 0x41, 0x3b, 0xca, 0x63, 0x2b, 0xf4, 0xa3, 0xca, 0x3a, 0x4a, 0x0e, 0xad, 0x06, 0xda, 0xbf,
	0x0c, 0xe8, 0x8e, 0x38, 0x0b, 0x84, 0x54, 0x9a, 0x7b, 0x8f, 0x19, 0xd6, 0x7b, 0xd8, 0xf7, 0x4b,
	0x40, 0x65, 0x64, 0xcf, 0xca, 0xe2, 0xeb, 0x7c, 0xba, 0x11, 0x6e, 0x3b, 0xf0, 0x64, 0x82, 0xc2,
	0x2f, 0x35, 0x6a, 0x41, 0x43, 0x25, 0x9e, 0x87, 0x4a, 0x65, 0xa5, 0x9b, 0xb4, 0x30, 0x07, 0x7f,
	0x4c, 0xe8, 0x64, 0x22, 0x55, 0x5c, 0x4d, 0x72, 0x38, 0xb9, 0x84, 0xc3, 0x2f, 0xa8, 0xd7, 0xa5,
	0x4b, 0x4e, 0xfe, 0xab, 0xe9, 0xec, 0x0b, 0xea, 0xbd, 0xbc, 0x47, 0xf3, 0x76, 0x8d, 0x8c, 0xe0,
	0x69, 0xfa, 0xaa, 0x62, 0xdd, 0x8a, 0x58, 0xff, 0x48, 0x60, 0x35, 0xa9, 0x5e, 0xb7, 0xbc, 0xa9,
	0xf6, 0x61, 0xd7, 0x1c, 0x83, 0x0c, 0xf3, 0xde, 0x8a, 0xe5, 0x56, 0x20, 0x1b, 0x8a, 0xb9, 0x0b,
	0x32, 0x86, 0x4e, 0xea, 0xab, 0xec, 0x90, 0xbc, 0xd8, 0xb6, 0xd9, 0x07, 0xa0, 0xbe, 0x03, 0x49,
	0x7d, 0xeb, 0x1b, 0xa9, 0x8c, 0x6b, 0xab, 0x14, 0xee, 0x00, 0x7e, 0xb4, 0xe0, 0x58, 0xc6, 0x81,
	0x7b, 0xbd, 0x50, 0x3a, 0x76, 0x83, 0x38, 0xf2, 0x8a, 0xd0, 0x1f, 0xb5, 0xe9, 0x5e, 0xf6, 0x1f,
	0x3b, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xac, 0xd8, 0xe1, 0x0e, 0xfa, 0x04, 0x00, 0x00,
}
