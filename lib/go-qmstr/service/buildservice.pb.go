// Code generated by protoc-gen-go. DO NOT EDIT.
// source: buildservice.proto

package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BuildResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildResponse) Reset()         { *m = BuildResponse{} }
func (m *BuildResponse) String() string { return proto.CompactTextString(m) }
func (*BuildResponse) ProtoMessage()    {}
func (*BuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_buildservice_a9514ac539abfee5, []int{0}
}
func (m *BuildResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildResponse.Unmarshal(m, b)
}
func (m *BuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildResponse.Marshal(b, m, deterministic)
}
func (dst *BuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildResponse.Merge(dst, src)
}
func (m *BuildResponse) XXX_Size() int {
	return xxx_messageInfo_BuildResponse.Size(m)
}
func (m *BuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BuildResponse proto.InternalMessageInfo

func (m *BuildResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type PushFileMessage struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Hash                 string   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushFileMessage) Reset()         { *m = PushFileMessage{} }
func (m *PushFileMessage) String() string { return proto.CompactTextString(m) }
func (*PushFileMessage) ProtoMessage()    {}
func (*PushFileMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_buildservice_a9514ac539abfee5, []int{1}
}
func (m *PushFileMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushFileMessage.Unmarshal(m, b)
}
func (m *PushFileMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushFileMessage.Marshal(b, m, deterministic)
}
func (dst *PushFileMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushFileMessage.Merge(dst, src)
}
func (m *PushFileMessage) XXX_Size() int {
	return xxx_messageInfo_PushFileMessage.Size(m)
}
func (m *PushFileMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PushFileMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PushFileMessage proto.InternalMessageInfo

func (m *PushFileMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PushFileMessage) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *PushFileMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PushFileResponse struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushFileResponse) Reset()         { *m = PushFileResponse{} }
func (m *PushFileResponse) String() string { return proto.CompactTextString(m) }
func (*PushFileResponse) ProtoMessage()    {}
func (*PushFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_buildservice_a9514ac539abfee5, []int{2}
}
func (m *PushFileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushFileResponse.Unmarshal(m, b)
}
func (m *PushFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushFileResponse.Marshal(b, m, deterministic)
}
func (dst *PushFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushFileResponse.Merge(dst, src)
}
func (m *PushFileResponse) XXX_Size() int {
	return xxx_messageInfo_PushFileResponse.Size(m)
}
func (m *PushFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PushFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PushFileResponse proto.InternalMessageInfo

func (m *PushFileResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type DeleteMessage struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Edge                 string   `protobuf:"bytes,2,opt,name=edge,proto3" json:"edge,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMessage) Reset()         { *m = DeleteMessage{} }
func (m *DeleteMessage) String() string { return proto.CompactTextString(m) }
func (*DeleteMessage) ProtoMessage()    {}
func (*DeleteMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_buildservice_a9514ac539abfee5, []int{3}
}
func (m *DeleteMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMessage.Unmarshal(m, b)
}
func (m *DeleteMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMessage.Marshal(b, m, deterministic)
}
func (dst *DeleteMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMessage.Merge(dst, src)
}
func (m *DeleteMessage) XXX_Size() int {
	return xxx_messageInfo_DeleteMessage.Size(m)
}
func (m *DeleteMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMessage proto.InternalMessageInfo

func (m *DeleteMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *DeleteMessage) GetEdge() string {
	if m != nil {
		return m.Edge
	}
	return ""
}

func init() {
	proto.RegisterType((*BuildResponse)(nil), "service.BuildResponse")
	proto.RegisterType((*PushFileMessage)(nil), "service.PushFileMessage")
	proto.RegisterType((*PushFileResponse)(nil), "service.PushFileResponse")
	proto.RegisterType((*DeleteMessage)(nil), "service.DeleteMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BuildServiceClient is the client API for BuildService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BuildServiceClient interface {
	Build(ctx context.Context, opts ...grpc.CallOption) (BuildService_BuildClient, error)
	SendBuildError(ctx context.Context, in *InfoNode, opts ...grpc.CallOption) (*BuildResponse, error)
	PushFile(ctx context.Context, in *PushFileMessage, opts ...grpc.CallOption) (*PushFileResponse, error)
	Package(ctx context.Context, opts ...grpc.CallOption) (BuildService_PackageClient, error)
	CreatePackage(ctx context.Context, in *PackageNode, opts ...grpc.CallOption) (*BuildResponse, error)
	CreateProject(ctx context.Context, in *ProjectNode, opts ...grpc.CallOption) (*BuildResponse, error)
	UpdateProjectNode(ctx context.Context, opts ...grpc.CallOption) (BuildService_UpdateProjectNodeClient, error)
	GetProjectNode(ctx context.Context, in *ProjectNode, opts ...grpc.CallOption) (*ProjectNode, error)
	DeleteNode(ctx context.Context, opts ...grpc.CallOption) (BuildService_DeleteNodeClient, error)
	DeleteEdge(ctx context.Context, in *DeleteMessage, opts ...grpc.CallOption) (*BuildResponse, error)
}

type buildServiceClient struct {
	cc *grpc.ClientConn
}

func NewBuildServiceClient(cc *grpc.ClientConn) BuildServiceClient {
	return &buildServiceClient{cc}
}

func (c *buildServiceClient) Build(ctx context.Context, opts ...grpc.CallOption) (BuildService_BuildClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BuildService_serviceDesc.Streams[0], "/service.BuildService/Build", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildServiceBuildClient{stream}
	return x, nil
}

type BuildService_BuildClient interface {
	Send(*FileNode) error
	CloseAndRecv() (*BuildResponse, error)
	grpc.ClientStream
}

type buildServiceBuildClient struct {
	grpc.ClientStream
}

func (x *buildServiceBuildClient) Send(m *FileNode) error {
	return x.ClientStream.SendMsg(m)
}

func (x *buildServiceBuildClient) CloseAndRecv() (*BuildResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BuildResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *buildServiceClient) SendBuildError(ctx context.Context, in *InfoNode, opts ...grpc.CallOption) (*BuildResponse, error) {
	out := new(BuildResponse)
	err := c.cc.Invoke(ctx, "/service.BuildService/SendBuildError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) PushFile(ctx context.Context, in *PushFileMessage, opts ...grpc.CallOption) (*PushFileResponse, error) {
	out := new(PushFileResponse)
	err := c.cc.Invoke(ctx, "/service.BuildService/PushFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) Package(ctx context.Context, opts ...grpc.CallOption) (BuildService_PackageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BuildService_serviceDesc.Streams[1], "/service.BuildService/Package", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildServicePackageClient{stream}
	return x, nil
}

type BuildService_PackageClient interface {
	Send(*FileNode) error
	CloseAndRecv() (*BuildResponse, error)
	grpc.ClientStream
}

type buildServicePackageClient struct {
	grpc.ClientStream
}

func (x *buildServicePackageClient) Send(m *FileNode) error {
	return x.ClientStream.SendMsg(m)
}

func (x *buildServicePackageClient) CloseAndRecv() (*BuildResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BuildResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *buildServiceClient) CreatePackage(ctx context.Context, in *PackageNode, opts ...grpc.CallOption) (*BuildResponse, error) {
	out := new(BuildResponse)
	err := c.cc.Invoke(ctx, "/service.BuildService/CreatePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) CreateProject(ctx context.Context, in *ProjectNode, opts ...grpc.CallOption) (*BuildResponse, error) {
	out := new(BuildResponse)
	err := c.cc.Invoke(ctx, "/service.BuildService/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) UpdateProjectNode(ctx context.Context, opts ...grpc.CallOption) (BuildService_UpdateProjectNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BuildService_serviceDesc.Streams[2], "/service.BuildService/UpdateProjectNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildServiceUpdateProjectNodeClient{stream}
	return x, nil
}

type BuildService_UpdateProjectNodeClient interface {
	Send(*PackageNode) error
	CloseAndRecv() (*BuildResponse, error)
	grpc.ClientStream
}

type buildServiceUpdateProjectNodeClient struct {
	grpc.ClientStream
}

func (x *buildServiceUpdateProjectNodeClient) Send(m *PackageNode) error {
	return x.ClientStream.SendMsg(m)
}

func (x *buildServiceUpdateProjectNodeClient) CloseAndRecv() (*BuildResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BuildResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *buildServiceClient) GetProjectNode(ctx context.Context, in *ProjectNode, opts ...grpc.CallOption) (*ProjectNode, error) {
	out := new(ProjectNode)
	err := c.cc.Invoke(ctx, "/service.BuildService/GetProjectNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) DeleteNode(ctx context.Context, opts ...grpc.CallOption) (BuildService_DeleteNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BuildService_serviceDesc.Streams[3], "/service.BuildService/DeleteNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildServiceDeleteNodeClient{stream}
	return x, nil
}

type BuildService_DeleteNodeClient interface {
	Send(*DeleteMessage) error
	CloseAndRecv() (*BuildResponse, error)
	grpc.ClientStream
}

type buildServiceDeleteNodeClient struct {
	grpc.ClientStream
}

func (x *buildServiceDeleteNodeClient) Send(m *DeleteMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *buildServiceDeleteNodeClient) CloseAndRecv() (*BuildResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BuildResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *buildServiceClient) DeleteEdge(ctx context.Context, in *DeleteMessage, opts ...grpc.CallOption) (*BuildResponse, error) {
	out := new(BuildResponse)
	err := c.cc.Invoke(ctx, "/service.BuildService/DeleteEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuildServiceServer is the server API for BuildService service.
type BuildServiceServer interface {
	Build(BuildService_BuildServer) error
	SendBuildError(context.Context, *InfoNode) (*BuildResponse, error)
	PushFile(context.Context, *PushFileMessage) (*PushFileResponse, error)
	Package(BuildService_PackageServer) error
	CreatePackage(context.Context, *PackageNode) (*BuildResponse, error)
	CreateProject(context.Context, *ProjectNode) (*BuildResponse, error)
	UpdateProjectNode(BuildService_UpdateProjectNodeServer) error
	GetProjectNode(context.Context, *ProjectNode) (*ProjectNode, error)
	DeleteNode(BuildService_DeleteNodeServer) error
	DeleteEdge(context.Context, *DeleteMessage) (*BuildResponse, error)
}

func RegisterBuildServiceServer(s *grpc.Server, srv BuildServiceServer) {
	s.RegisterService(&_BuildService_serviceDesc, srv)
}

func _BuildService_Build_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BuildServiceServer).Build(&buildServiceBuildServer{stream})
}

type BuildService_BuildServer interface {
	SendAndClose(*BuildResponse) error
	Recv() (*FileNode, error)
	grpc.ServerStream
}

type buildServiceBuildServer struct {
	grpc.ServerStream
}

func (x *buildServiceBuildServer) SendAndClose(m *BuildResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *buildServiceBuildServer) Recv() (*FileNode, error) {
	m := new(FileNode)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BuildService_SendBuildError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).SendBuildError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BuildService/SendBuildError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).SendBuildError(ctx, req.(*InfoNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_PushFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushFileMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).PushFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BuildService/PushFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).PushFile(ctx, req.(*PushFileMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_Package_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BuildServiceServer).Package(&buildServicePackageServer{stream})
}

type BuildService_PackageServer interface {
	SendAndClose(*BuildResponse) error
	Recv() (*FileNode, error)
	grpc.ServerStream
}

type buildServicePackageServer struct {
	grpc.ServerStream
}

func (x *buildServicePackageServer) SendAndClose(m *BuildResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *buildServicePackageServer) Recv() (*FileNode, error) {
	m := new(FileNode)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BuildService_CreatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).CreatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BuildService/CreatePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).CreatePackage(ctx, req.(*PackageNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BuildService/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).CreateProject(ctx, req.(*ProjectNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_UpdateProjectNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BuildServiceServer).UpdateProjectNode(&buildServiceUpdateProjectNodeServer{stream})
}

type BuildService_UpdateProjectNodeServer interface {
	SendAndClose(*BuildResponse) error
	Recv() (*PackageNode, error)
	grpc.ServerStream
}

type buildServiceUpdateProjectNodeServer struct {
	grpc.ServerStream
}

func (x *buildServiceUpdateProjectNodeServer) SendAndClose(m *BuildResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *buildServiceUpdateProjectNodeServer) Recv() (*PackageNode, error) {
	m := new(PackageNode)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BuildService_GetProjectNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).GetProjectNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BuildService/GetProjectNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).GetProjectNode(ctx, req.(*ProjectNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_DeleteNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BuildServiceServer).DeleteNode(&buildServiceDeleteNodeServer{stream})
}

type BuildService_DeleteNodeServer interface {
	SendAndClose(*BuildResponse) error
	Recv() (*DeleteMessage, error)
	grpc.ServerStream
}

type buildServiceDeleteNodeServer struct {
	grpc.ServerStream
}

func (x *buildServiceDeleteNodeServer) SendAndClose(m *BuildResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *buildServiceDeleteNodeServer) Recv() (*DeleteMessage, error) {
	m := new(DeleteMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BuildService_DeleteEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).DeleteEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BuildService/DeleteEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).DeleteEdge(ctx, req.(*DeleteMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _BuildService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.BuildService",
	HandlerType: (*BuildServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendBuildError",
			Handler:    _BuildService_SendBuildError_Handler,
		},
		{
			MethodName: "PushFile",
			Handler:    _BuildService_PushFile_Handler,
		},
		{
			MethodName: "CreatePackage",
			Handler:    _BuildService_CreatePackage_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _BuildService_CreateProject_Handler,
		},
		{
			MethodName: "GetProjectNode",
			Handler:    _BuildService_GetProjectNode_Handler,
		},
		{
			MethodName: "DeleteEdge",
			Handler:    _BuildService_DeleteEdge_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Build",
			Handler:       _BuildService_Build_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Package",
			Handler:       _BuildService_Package_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateProjectNode",
			Handler:       _BuildService_UpdateProjectNode_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteNode",
			Handler:       _BuildService_DeleteNode_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "buildservice.proto",
}

func init() { proto.RegisterFile("buildservice.proto", fileDescriptor_buildservice_a9514ac539abfee5) }

var fileDescriptor_buildservice_a9514ac539abfee5 = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcb, 0xce, 0xd3, 0x30,
	0x10, 0x85, 0x1b, 0xda, 0xd2, 0x32, 0xea, 0xd5, 0x42, 0x55, 0xe8, 0xaa, 0xca, 0x02, 0x85, 0x4d,
	0x16, 0x20, 0x10, 0x1b, 0x6e, 0x85, 0x82, 0x58, 0x14, 0x55, 0xa9, 0x90, 0xd8, 0xba, 0xf1, 0x90,
	0x04, 0xd2, 0x38, 0xd8, 0x0e, 0x6f, 0xc1, 0x3b, 0x23, 0x3b, 0x75, 0x92, 0x72, 0xf9, 0xab, 0xfe,
	0xbb, 0xf1, 0xf1, 0xf1, 0x77, 0x66, 0x46, 0x09, 0x90, 0x43, 0x99, 0x66, 0x4c, 0xa2, 0xf8, 0x99,
	0x46, 0x18, 0x14, 0x82, 0x2b, 0x4e, 0x06, 0xa7, 0xe3, 0x72, 0xca, 0xa8, 0xa2, 0x47, 0xce, 0x30,
	0xab, 0x6e, 0xbc, 0x47, 0x30, 0x5e, 0x6b, 0x7f, 0x88, 0xb2, 0xe0, 0xb9, 0x44, 0xe2, 0xc2, 0x40,
	0x96, 0x51, 0x84, 0x52, 0xba, 0xce, 0xca, 0xf1, 0x87, 0xa1, 0x3d, 0x7a, 0x5b, 0x98, 0xee, 0x4a,
	0x99, 0xbc, 0x4f, 0x33, 0xdc, 0xa2, 0x94, 0x34, 0x46, 0x42, 0xa0, 0x97, 0xd3, 0x23, 0x1a, 0xe7,
	0xbd, 0xd0, 0xd4, 0x5a, 0x4b, 0xa8, 0x4c, 0xdc, 0x3b, 0x95, 0xa6, 0x6b, 0xad, 0xe9, 0x60, 0xb7,
	0xbb, 0x72, 0xfc, 0x51, 0x68, 0x6a, 0xef, 0x21, 0xcc, 0x2c, 0xae, 0x0e, 0x27, 0xd0, 0x2b, 0xa8,
	0x4a, 0x2c, 0x4f, 0xd7, 0xde, 0x53, 0x18, 0xbf, 0xc3, 0x0c, 0x55, 0x1d, 0x3a, 0x83, 0x6e, 0x99,
	0xb2, 0x93, 0x47, 0x97, 0xfa, 0x19, 0xb2, 0x18, 0x6d, 0xa4, 0xae, 0x1f, 0xff, 0xea, 0xc3, 0xc8,
	0x4c, 0xb6, 0xaf, 0x46, 0x27, 0xcf, 0xa0, 0x6f, 0xce, 0x64, 0x1e, 0xd8, 0xe5, 0xe8, 0xec, 0x4f,
	0x9c, 0xe1, 0x72, 0x51, 0x4b, 0x67, 0xcb, 0xf0, 0x3a, 0xbe, 0x43, 0x5e, 0xc0, 0x64, 0x8f, 0x39,
	0x33, 0x17, 0x1b, 0x21, 0xb8, 0x68, 0x01, 0x3e, 0xe6, 0x5f, 0xf9, 0xcd, 0x00, 0xf2, 0x06, 0x86,
	0x76, 0x4c, 0xe2, 0xd6, 0xae, 0x3f, 0x16, 0xb9, 0x7c, 0xf0, 0xd7, 0x4d, 0x0b, 0xf1, 0x1c, 0x06,
	0x3b, 0x1a, 0x7d, 0xd7, 0xb3, 0x5f, 0xd9, 0xfb, 0x2b, 0x18, 0xbf, 0x15, 0x48, 0x15, 0xda, 0xf7,
	0xf7, 0x9b, 0x9c, 0x4a, 0xb9, 0xd0, 0x7d, 0x03, 0x10, 0xfc, 0x1b, 0x46, 0xaa, 0x0d, 0xa8, 0x94,
	0x0b, 0x80, 0x0d, 0xcc, 0x3f, 0x17, 0xac, 0x01, 0x68, 0xfb, 0xb5, 0x5d, 0xf8, 0x0e, 0x79, 0x09,
	0x93, 0x0f, 0xa8, 0xfe, 0xc3, 0x68, 0x35, 0xf2, 0x4f, 0xd5, 0xeb, 0x90, 0xd7, 0x00, 0xd5, 0x47,
	0x64, 0xde, 0x36, 0x49, 0x67, 0x5f, 0xd6, 0x85, 0x0e, 0x4e, 0x84, 0x0d, 0x8b, 0x6f, 0x41, 0x58,
	0xbb, 0xb0, 0xe0, 0x22, 0x0e, 0x7e, 0x1c, 0xa5, 0x12, 0x41, 0x2c, 0x8a, 0xc8, 0x3a, 0xbf, 0x74,
	0x0e, 0x77, 0xcd, 0xbf, 0xf8, 0xe4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xf2, 0xb6, 0xdf,
	0xbb, 0x03, 0x00, 0x00,
}
