// Code generated by protoc-gen-go. DO NOT EDIT.
// source: buildservice.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BuildResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildResponse) Reset()         { *m = BuildResponse{} }
func (m *BuildResponse) String() string { return proto.CompactTextString(m) }
func (*BuildResponse) ProtoMessage()    {}
func (*BuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ed067315d7fb9cd, []int{0}
}

func (m *BuildResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildResponse.Unmarshal(m, b)
}
func (m *BuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildResponse.Marshal(b, m, deterministic)
}
func (m *BuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildResponse.Merge(m, src)
}
func (m *BuildResponse) XXX_Size() int {
	return xxx_messageInfo_BuildResponse.Size(m)
}
func (m *BuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BuildResponse proto.InternalMessageInfo

func (m *BuildResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type PushFileMessage struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Hash                 string   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushFileMessage) Reset()         { *m = PushFileMessage{} }
func (m *PushFileMessage) String() string { return proto.CompactTextString(m) }
func (*PushFileMessage) ProtoMessage()    {}
func (*PushFileMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ed067315d7fb9cd, []int{1}
}

func (m *PushFileMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushFileMessage.Unmarshal(m, b)
}
func (m *PushFileMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushFileMessage.Marshal(b, m, deterministic)
}
func (m *PushFileMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushFileMessage.Merge(m, src)
}
func (m *PushFileMessage) XXX_Size() int {
	return xxx_messageInfo_PushFileMessage.Size(m)
}
func (m *PushFileMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PushFileMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PushFileMessage proto.InternalMessageInfo

func (m *PushFileMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PushFileMessage) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *PushFileMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PushFileResponse struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushFileResponse) Reset()         { *m = PushFileResponse{} }
func (m *PushFileResponse) String() string { return proto.CompactTextString(m) }
func (*PushFileResponse) ProtoMessage()    {}
func (*PushFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ed067315d7fb9cd, []int{2}
}

func (m *PushFileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushFileResponse.Unmarshal(m, b)
}
func (m *PushFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushFileResponse.Marshal(b, m, deterministic)
}
func (m *PushFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushFileResponse.Merge(m, src)
}
func (m *PushFileResponse) XXX_Size() int {
	return xxx_messageInfo_PushFileResponse.Size(m)
}
func (m *PushFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PushFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PushFileResponse proto.InternalMessageInfo

func (m *PushFileResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type DeleteMessage struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Edge                 string   `protobuf:"bytes,2,opt,name=edge,proto3" json:"edge,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMessage) Reset()         { *m = DeleteMessage{} }
func (m *DeleteMessage) String() string { return proto.CompactTextString(m) }
func (*DeleteMessage) ProtoMessage()    {}
func (*DeleteMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ed067315d7fb9cd, []int{3}
}

func (m *DeleteMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMessage.Unmarshal(m, b)
}
func (m *DeleteMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMessage.Marshal(b, m, deterministic)
}
func (m *DeleteMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMessage.Merge(m, src)
}
func (m *DeleteMessage) XXX_Size() int {
	return xxx_messageInfo_DeleteMessage.Size(m)
}
func (m *DeleteMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMessage proto.InternalMessageInfo

func (m *DeleteMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *DeleteMessage) GetEdge() string {
	if m != nil {
		return m.Edge
	}
	return ""
}

type UpdatePackageNodeMessage struct {
	Package              *PackageNode `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
	Targets              []*FileNode  `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdatePackageNodeMessage) Reset()         { *m = UpdatePackageNodeMessage{} }
func (m *UpdatePackageNodeMessage) String() string { return proto.CompactTextString(m) }
func (*UpdatePackageNodeMessage) ProtoMessage()    {}
func (*UpdatePackageNodeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ed067315d7fb9cd, []int{4}
}

func (m *UpdatePackageNodeMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePackageNodeMessage.Unmarshal(m, b)
}
func (m *UpdatePackageNodeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePackageNodeMessage.Marshal(b, m, deterministic)
}
func (m *UpdatePackageNodeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePackageNodeMessage.Merge(m, src)
}
func (m *UpdatePackageNodeMessage) XXX_Size() int {
	return xxx_messageInfo_UpdatePackageNodeMessage.Size(m)
}
func (m *UpdatePackageNodeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePackageNodeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePackageNodeMessage proto.InternalMessageInfo

func (m *UpdatePackageNodeMessage) GetPackage() *PackageNode {
	if m != nil {
		return m.Package
	}
	return nil
}

func (m *UpdatePackageNodeMessage) GetTargets() []*FileNode {
	if m != nil {
		return m.Targets
	}
	return nil
}

func init() {
	proto.RegisterType((*BuildResponse)(nil), "service.BuildResponse")
	proto.RegisterType((*PushFileMessage)(nil), "service.PushFileMessage")
	proto.RegisterType((*PushFileResponse)(nil), "service.PushFileResponse")
	proto.RegisterType((*DeleteMessage)(nil), "service.DeleteMessage")
	proto.RegisterType((*UpdatePackageNodeMessage)(nil), "service.UpdatePackageNodeMessage")
}

func init() { proto.RegisterFile("buildservice.proto", fileDescriptor_1ed067315d7fb9cd) }

var fileDescriptor_1ed067315d7fb9cd = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x86, 0xe3, 0xa6, 0x25, 0x65, 0xda, 0xf4, 0x63, 0x84, 0xaa, 0x25, 0xa7, 0xe0, 0x03, 0x32,
	0x42, 0xf2, 0x21, 0x08, 0x6e, 0x7c, 0x15, 0x02, 0xe2, 0x50, 0x14, 0xb9, 0x42, 0xe2, 0xba, 0xf5,
	0x0e, 0x4e, 0x20, 0xf1, 0x9a, 0xdd, 0x35, 0xfc, 0x22, 0xfe, 0x27, 0xda, 0xb5, 0xd7, 0x76, 0x94,
	0xb6, 0x81, 0xde, 0x66, 0xdf, 0x79, 0xe7, 0x99, 0xf1, 0xec, 0xca, 0x80, 0x57, 0xe5, 0x62, 0x29,
	0x34, 0xa9, 0x5f, 0x8b, 0x94, 0xe2, 0x42, 0x49, 0x23, 0x71, 0x50, 0x1f, 0x47, 0xc7, 0x82, 0x1b,
	0xbe, 0x92, 0x82, 0x96, 0x55, 0x26, 0x7c, 0x02, 0xc3, 0x73, 0xeb, 0x4f, 0x48, 0x17, 0x32, 0xd7,
	0x84, 0x0c, 0x06, 0xba, 0x4c, 0x53, 0xd2, 0x9a, 0x05, 0xe3, 0x20, 0xda, 0x4f, 0xfc, 0x31, 0xbc,
	0x80, 0xe3, 0x59, 0xa9, 0xe7, 0x1f, 0x16, 0x4b, 0xba, 0x20, 0xad, 0x79, 0x46, 0x88, 0xb0, 0x9b,
	0xf3, 0x15, 0x39, 0xe7, 0xfd, 0xc4, 0xc5, 0x56, 0x9b, 0x73, 0x3d, 0x67, 0x3b, 0x95, 0x66, 0x63,
	0xab, 0xd9, 0xc6, 0xac, 0x3f, 0x0e, 0xa2, 0xc3, 0xc4, 0xc5, 0xe1, 0x63, 0x38, 0xf1, 0xb8, 0xa6,
	0x39, 0xc2, 0x6e, 0xc1, 0xcd, 0xdc, 0xf3, 0x6c, 0x1c, 0x3e, 0x87, 0xe1, 0x7b, 0x5a, 0x92, 0x69,
	0x9a, 0x9e, 0x40, 0xbf, 0x5c, 0x88, 0xda, 0x63, 0x43, 0x5b, 0x46, 0x22, 0x23, 0xdf, 0xd2, 0xc6,
	0xe1, 0x6f, 0x60, 0x5f, 0x0a, 0xc1, 0x0d, 0xcd, 0x78, 0xfa, 0x83, 0x67, 0xf4, 0x59, 0x8a, 0x86,
	0x10, 0xc3, 0xa0, 0xa8, 0x54, 0x47, 0x39, 0x98, 0x3c, 0x88, 0xfd, 0xbe, 0x3a, 0xee, 0xc4, 0x9b,
	0xf0, 0x29, 0x0c, 0x0c, 0x57, 0x19, 0x19, 0xcd, 0x76, 0xc6, 0xfd, 0xe8, 0x60, 0x72, 0xda, 0xf8,
	0xed, 0xf8, 0x95, 0xb9, 0x76, 0x4c, 0xfe, 0xec, 0xc1, 0xa1, 0x5b, 0xe9, 0x65, 0x65, 0xc1, 0x17,
	0xb0, 0xe7, 0xce, 0xb8, 0x59, 0x35, 0x3a, 0x6b, 0xa4, 0xb5, 0x5b, 0x08, 0x7b, 0x51, 0x80, 0x2f,
	0xe1, 0xe8, 0x92, 0x72, 0xe1, 0x12, 0x53, 0xa5, 0xa4, 0xea, 0x00, 0x3e, 0xe5, 0xdf, 0xe4, 0xed,
	0x00, 0x7c, 0x0b, 0xfb, 0x7e, 0xbf, 0xc8, 0xda, 0xef, 0x5b, 0xbf, 0xc1, 0xd1, 0xc3, 0x8d, 0x4c,
	0x07, 0x31, 0x83, 0xd3, 0x8d, 0x1d, 0xe2, 0xa3, 0xa6, 0xe2, 0xa6, 0xfd, 0xde, 0x32, 0xd4, 0x6b,
	0x18, 0xbe, 0x53, 0xd4, 0x56, 0xe1, 0xb5, 0x9b, 0xff, 0x27, 0x80, 0x92, 0xdf, 0x29, 0x35, 0x5d,
	0x40, 0xa5, 0x6c, 0x01, 0x4c, 0x9b, 0x6f, 0x6a, 0xed, 0xff, 0x3b, 0x45, 0x14, 0xe0, 0x2b, 0x38,
	0xfa, 0x48, 0xe6, 0x06, 0x46, 0x67, 0x90, 0x6b, 0xd5, 0xb0, 0x87, 0x6f, 0x00, 0xaa, 0x57, 0xed,
	0x6a, 0xdb, 0x4e, 0x6b, 0x4f, 0x7d, 0xcb, 0x04, 0x35, 0x61, 0x2a, 0xb2, 0x3b, 0x10, 0xce, 0x19,
	0x9c, 0x49, 0x95, 0xc5, 0x3f, 0x57, 0xda, 0xa8, 0x38, 0x53, 0x45, 0xea, 0x9d, 0x5f, 0x7b, 0x57,
	0xf7, 0xdc, 0xcf, 0xe1, 0xd9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x48, 0x53, 0xe3, 0x4c,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BuildServiceClient is the client API for BuildService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BuildServiceClient interface {
	Build(ctx context.Context, opts ...grpc.CallOption) (BuildService_BuildClient, error)
	SendBuildError(ctx context.Context, in *InfoNode, opts ...grpc.CallOption) (*BuildResponse, error)
	PushFile(ctx context.Context, in *PushFileMessage, opts ...grpc.CallOption) (*PushFileResponse, error)
	UpdatePackageNode(ctx context.Context, in *UpdatePackageNodeMessage, opts ...grpc.CallOption) (*BuildResponse, error)
	CreatePackage(ctx context.Context, in *PackageNode, opts ...grpc.CallOption) (*BuildResponse, error)
	CreateProject(ctx context.Context, in *ProjectNode, opts ...grpc.CallOption) (*BuildResponse, error)
	UpdateProjectNode(ctx context.Context, opts ...grpc.CallOption) (BuildService_UpdateProjectNodeClient, error)
	GetProjectNode(ctx context.Context, in *ProjectNode, opts ...grpc.CallOption) (*ProjectNode, error)
	DeleteNode(ctx context.Context, opts ...grpc.CallOption) (BuildService_DeleteNodeClient, error)
	DeleteEdge(ctx context.Context, in *DeleteMessage, opts ...grpc.CallOption) (*BuildResponse, error)
}

type buildServiceClient struct {
	cc *grpc.ClientConn
}

func NewBuildServiceClient(cc *grpc.ClientConn) BuildServiceClient {
	return &buildServiceClient{cc}
}

func (c *buildServiceClient) Build(ctx context.Context, opts ...grpc.CallOption) (BuildService_BuildClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BuildService_serviceDesc.Streams[0], "/service.BuildService/Build", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildServiceBuildClient{stream}
	return x, nil
}

type BuildService_BuildClient interface {
	Send(*FileNode) error
	CloseAndRecv() (*BuildResponse, error)
	grpc.ClientStream
}

type buildServiceBuildClient struct {
	grpc.ClientStream
}

func (x *buildServiceBuildClient) Send(m *FileNode) error {
	return x.ClientStream.SendMsg(m)
}

func (x *buildServiceBuildClient) CloseAndRecv() (*BuildResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BuildResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *buildServiceClient) SendBuildError(ctx context.Context, in *InfoNode, opts ...grpc.CallOption) (*BuildResponse, error) {
	out := new(BuildResponse)
	err := c.cc.Invoke(ctx, "/service.BuildService/SendBuildError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) PushFile(ctx context.Context, in *PushFileMessage, opts ...grpc.CallOption) (*PushFileResponse, error) {
	out := new(PushFileResponse)
	err := c.cc.Invoke(ctx, "/service.BuildService/PushFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) UpdatePackageNode(ctx context.Context, in *UpdatePackageNodeMessage, opts ...grpc.CallOption) (*BuildResponse, error) {
	out := new(BuildResponse)
	err := c.cc.Invoke(ctx, "/service.BuildService/UpdatePackageNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) CreatePackage(ctx context.Context, in *PackageNode, opts ...grpc.CallOption) (*BuildResponse, error) {
	out := new(BuildResponse)
	err := c.cc.Invoke(ctx, "/service.BuildService/CreatePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) CreateProject(ctx context.Context, in *ProjectNode, opts ...grpc.CallOption) (*BuildResponse, error) {
	out := new(BuildResponse)
	err := c.cc.Invoke(ctx, "/service.BuildService/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) UpdateProjectNode(ctx context.Context, opts ...grpc.CallOption) (BuildService_UpdateProjectNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BuildService_serviceDesc.Streams[1], "/service.BuildService/UpdateProjectNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildServiceUpdateProjectNodeClient{stream}
	return x, nil
}

type BuildService_UpdateProjectNodeClient interface {
	Send(*PackageNode) error
	CloseAndRecv() (*BuildResponse, error)
	grpc.ClientStream
}

type buildServiceUpdateProjectNodeClient struct {
	grpc.ClientStream
}

func (x *buildServiceUpdateProjectNodeClient) Send(m *PackageNode) error {
	return x.ClientStream.SendMsg(m)
}

func (x *buildServiceUpdateProjectNodeClient) CloseAndRecv() (*BuildResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BuildResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *buildServiceClient) GetProjectNode(ctx context.Context, in *ProjectNode, opts ...grpc.CallOption) (*ProjectNode, error) {
	out := new(ProjectNode)
	err := c.cc.Invoke(ctx, "/service.BuildService/GetProjectNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) DeleteNode(ctx context.Context, opts ...grpc.CallOption) (BuildService_DeleteNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BuildService_serviceDesc.Streams[2], "/service.BuildService/DeleteNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildServiceDeleteNodeClient{stream}
	return x, nil
}

type BuildService_DeleteNodeClient interface {
	Send(*DeleteMessage) error
	CloseAndRecv() (*BuildResponse, error)
	grpc.ClientStream
}

type buildServiceDeleteNodeClient struct {
	grpc.ClientStream
}

func (x *buildServiceDeleteNodeClient) Send(m *DeleteMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *buildServiceDeleteNodeClient) CloseAndRecv() (*BuildResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BuildResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *buildServiceClient) DeleteEdge(ctx context.Context, in *DeleteMessage, opts ...grpc.CallOption) (*BuildResponse, error) {
	out := new(BuildResponse)
	err := c.cc.Invoke(ctx, "/service.BuildService/DeleteEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuildServiceServer is the server API for BuildService service.
type BuildServiceServer interface {
	Build(BuildService_BuildServer) error
	SendBuildError(context.Context, *InfoNode) (*BuildResponse, error)
	PushFile(context.Context, *PushFileMessage) (*PushFileResponse, error)
	UpdatePackageNode(context.Context, *UpdatePackageNodeMessage) (*BuildResponse, error)
	CreatePackage(context.Context, *PackageNode) (*BuildResponse, error)
	CreateProject(context.Context, *ProjectNode) (*BuildResponse, error)
	UpdateProjectNode(BuildService_UpdateProjectNodeServer) error
	GetProjectNode(context.Context, *ProjectNode) (*ProjectNode, error)
	DeleteNode(BuildService_DeleteNodeServer) error
	DeleteEdge(context.Context, *DeleteMessage) (*BuildResponse, error)
}

// UnimplementedBuildServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBuildServiceServer struct {
}

func (*UnimplementedBuildServiceServer) Build(srv BuildService_BuildServer) error {
	return status.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (*UnimplementedBuildServiceServer) SendBuildError(ctx context.Context, req *InfoNode) (*BuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBuildError not implemented")
}
func (*UnimplementedBuildServiceServer) PushFile(ctx context.Context, req *PushFileMessage) (*PushFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushFile not implemented")
}
func (*UnimplementedBuildServiceServer) UpdatePackageNode(ctx context.Context, req *UpdatePackageNodeMessage) (*BuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePackageNode not implemented")
}
func (*UnimplementedBuildServiceServer) CreatePackage(ctx context.Context, req *PackageNode) (*BuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePackage not implemented")
}
func (*UnimplementedBuildServiceServer) CreateProject(ctx context.Context, req *ProjectNode) (*BuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (*UnimplementedBuildServiceServer) UpdateProjectNode(srv BuildService_UpdateProjectNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateProjectNode not implemented")
}
func (*UnimplementedBuildServiceServer) GetProjectNode(ctx context.Context, req *ProjectNode) (*ProjectNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectNode not implemented")
}
func (*UnimplementedBuildServiceServer) DeleteNode(srv BuildService_DeleteNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (*UnimplementedBuildServiceServer) DeleteEdge(ctx context.Context, req *DeleteMessage) (*BuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEdge not implemented")
}

func RegisterBuildServiceServer(s *grpc.Server, srv BuildServiceServer) {
	s.RegisterService(&_BuildService_serviceDesc, srv)
}

func _BuildService_Build_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BuildServiceServer).Build(&buildServiceBuildServer{stream})
}

type BuildService_BuildServer interface {
	SendAndClose(*BuildResponse) error
	Recv() (*FileNode, error)
	grpc.ServerStream
}

type buildServiceBuildServer struct {
	grpc.ServerStream
}

func (x *buildServiceBuildServer) SendAndClose(m *BuildResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *buildServiceBuildServer) Recv() (*FileNode, error) {
	m := new(FileNode)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BuildService_SendBuildError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).SendBuildError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BuildService/SendBuildError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).SendBuildError(ctx, req.(*InfoNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_PushFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushFileMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).PushFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BuildService/PushFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).PushFile(ctx, req.(*PushFileMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_UpdatePackageNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePackageNodeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).UpdatePackageNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BuildService/UpdatePackageNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).UpdatePackageNode(ctx, req.(*UpdatePackageNodeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_CreatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).CreatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BuildService/CreatePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).CreatePackage(ctx, req.(*PackageNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BuildService/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).CreateProject(ctx, req.(*ProjectNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_UpdateProjectNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BuildServiceServer).UpdateProjectNode(&buildServiceUpdateProjectNodeServer{stream})
}

type BuildService_UpdateProjectNodeServer interface {
	SendAndClose(*BuildResponse) error
	Recv() (*PackageNode, error)
	grpc.ServerStream
}

type buildServiceUpdateProjectNodeServer struct {
	grpc.ServerStream
}

func (x *buildServiceUpdateProjectNodeServer) SendAndClose(m *BuildResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *buildServiceUpdateProjectNodeServer) Recv() (*PackageNode, error) {
	m := new(PackageNode)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BuildService_GetProjectNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).GetProjectNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BuildService/GetProjectNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).GetProjectNode(ctx, req.(*ProjectNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_DeleteNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BuildServiceServer).DeleteNode(&buildServiceDeleteNodeServer{stream})
}

type BuildService_DeleteNodeServer interface {
	SendAndClose(*BuildResponse) error
	Recv() (*DeleteMessage, error)
	grpc.ServerStream
}

type buildServiceDeleteNodeServer struct {
	grpc.ServerStream
}

func (x *buildServiceDeleteNodeServer) SendAndClose(m *BuildResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *buildServiceDeleteNodeServer) Recv() (*DeleteMessage, error) {
	m := new(DeleteMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BuildService_DeleteEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).DeleteEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BuildService/DeleteEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).DeleteEdge(ctx, req.(*DeleteMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _BuildService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.BuildService",
	HandlerType: (*BuildServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendBuildError",
			Handler:    _BuildService_SendBuildError_Handler,
		},
		{
			MethodName: "PushFile",
			Handler:    _BuildService_PushFile_Handler,
		},
		{
			MethodName: "UpdatePackageNode",
			Handler:    _BuildService_UpdatePackageNode_Handler,
		},
		{
			MethodName: "CreatePackage",
			Handler:    _BuildService_CreatePackage_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _BuildService_CreateProject_Handler,
		},
		{
			MethodName: "GetProjectNode",
			Handler:    _BuildService_GetProjectNode_Handler,
		},
		{
			MethodName: "DeleteEdge",
			Handler:    _BuildService_DeleteEdge_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Build",
			Handler:       _BuildService_Build_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateProjectNode",
			Handler:       _BuildService_UpdateProjectNode_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteNode",
			Handler:       _BuildService_DeleteNode_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "buildservice.proto",
}
