// Code generated by protoc-gen-go. DO NOT EDIT.
// source: analyzerservice.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AnalyzerConfigRequest struct {
	AnalyzerID           int32    `protobuf:"varint,1,opt,name=analyzerID,proto3" json:"analyzerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnalyzerConfigRequest) Reset()         { *m = AnalyzerConfigRequest{} }
func (m *AnalyzerConfigRequest) String() string { return proto.CompactTextString(m) }
func (*AnalyzerConfigRequest) ProtoMessage()    {}
func (*AnalyzerConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bd400d4a2b5e8aa, []int{0}
}

func (m *AnalyzerConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyzerConfigRequest.Unmarshal(m, b)
}
func (m *AnalyzerConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyzerConfigRequest.Marshal(b, m, deterministic)
}
func (m *AnalyzerConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzerConfigRequest.Merge(m, src)
}
func (m *AnalyzerConfigRequest) XXX_Size() int {
	return xxx_messageInfo_AnalyzerConfigRequest.Size(m)
}
func (m *AnalyzerConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzerConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzerConfigRequest proto.InternalMessageInfo

func (m *AnalyzerConfigRequest) GetAnalyzerID() int32 {
	if m != nil {
		return m.AnalyzerID
	}
	return 0
}

type AnalyzerConfigResponse struct {
	AnalyzerConfig       string   `protobuf:"bytes,1,opt,name=analyzerConfig,proto3" json:"analyzerConfig,omitempty"`
	Token                int64    `protobuf:"varint,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnalyzerConfigResponse) Reset()         { *m = AnalyzerConfigResponse{} }
func (m *AnalyzerConfigResponse) String() string { return proto.CompactTextString(m) }
func (*AnalyzerConfigResponse) ProtoMessage()    {}
func (*AnalyzerConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bd400d4a2b5e8aa, []int{1}
}

func (m *AnalyzerConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyzerConfigResponse.Unmarshal(m, b)
}
func (m *AnalyzerConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyzerConfigResponse.Marshal(b, m, deterministic)
}
func (m *AnalyzerConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzerConfigResponse.Merge(m, src)
}
func (m *AnalyzerConfigResponse) XXX_Size() int {
	return xxx_messageInfo_AnalyzerConfigResponse.Size(m)
}
func (m *AnalyzerConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzerConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzerConfigResponse proto.InternalMessageInfo

func (m *AnalyzerConfigResponse) GetAnalyzerConfig() string {
	if m != nil {
		return m.AnalyzerConfig
	}
	return ""
}

func (m *AnalyzerConfigResponse) GetToken() int64 {
	if m != nil {
		return m.Token
	}
	return 0
}

type InfoNodesMessage struct {
	Token                int64       `protobuf:"varint,1,opt,name=token,proto3" json:"token,omitempty"`
	Uid                  string      `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Infonodes            []*InfoNode `protobuf:"bytes,3,rep,name=infonodes,proto3" json:"infonodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *InfoNodesMessage) Reset()         { *m = InfoNodesMessage{} }
func (m *InfoNodesMessage) String() string { return proto.CompactTextString(m) }
func (*InfoNodesMessage) ProtoMessage()    {}
func (*InfoNodesMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bd400d4a2b5e8aa, []int{2}
}

func (m *InfoNodesMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoNodesMessage.Unmarshal(m, b)
}
func (m *InfoNodesMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoNodesMessage.Marshal(b, m, deterministic)
}
func (m *InfoNodesMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoNodesMessage.Merge(m, src)
}
func (m *InfoNodesMessage) XXX_Size() int {
	return xxx_messageInfo_InfoNodesMessage.Size(m)
}
func (m *InfoNodesMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoNodesMessage.DiscardUnknown(m)
}

var xxx_messageInfo_InfoNodesMessage proto.InternalMessageInfo

func (m *InfoNodesMessage) GetToken() int64 {
	if m != nil {
		return m.Token
	}
	return 0
}

func (m *InfoNodesMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *InfoNodesMessage) GetInfonodes() []*InfoNode {
	if m != nil {
		return m.Infonodes
	}
	return nil
}

type DiagnosticNodeMessage struct {
	Token                int64           `protobuf:"varint,1,opt,name=token,proto3" json:"token,omitempty"`
	Uid                  string          `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Diagnosticnode       *DiagnosticNode `protobuf:"bytes,3,opt,name=diagnosticnode,proto3" json:"diagnosticnode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DiagnosticNodeMessage) Reset()         { *m = DiagnosticNodeMessage{} }
func (m *DiagnosticNodeMessage) String() string { return proto.CompactTextString(m) }
func (*DiagnosticNodeMessage) ProtoMessage()    {}
func (*DiagnosticNodeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bd400d4a2b5e8aa, []int{3}
}

func (m *DiagnosticNodeMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiagnosticNodeMessage.Unmarshal(m, b)
}
func (m *DiagnosticNodeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiagnosticNodeMessage.Marshal(b, m, deterministic)
}
func (m *DiagnosticNodeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiagnosticNodeMessage.Merge(m, src)
}
func (m *DiagnosticNodeMessage) XXX_Size() int {
	return xxx_messageInfo_DiagnosticNodeMessage.Size(m)
}
func (m *DiagnosticNodeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DiagnosticNodeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DiagnosticNodeMessage proto.InternalMessageInfo

func (m *DiagnosticNodeMessage) GetToken() int64 {
	if m != nil {
		return m.Token
	}
	return 0
}

func (m *DiagnosticNodeMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *DiagnosticNodeMessage) GetDiagnosticnode() *DiagnosticNode {
	if m != nil {
		return m.Diagnosticnode
	}
	return nil
}

type SendResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendResponse) Reset()         { *m = SendResponse{} }
func (m *SendResponse) String() string { return proto.CompactTextString(m) }
func (*SendResponse) ProtoMessage()    {}
func (*SendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bd400d4a2b5e8aa, []int{4}
}

func (m *SendResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendResponse.Unmarshal(m, b)
}
func (m *SendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendResponse.Marshal(b, m, deterministic)
}
func (m *SendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendResponse.Merge(m, src)
}
func (m *SendResponse) XXX_Size() int {
	return xxx_messageInfo_SendResponse.Size(m)
}
func (m *SendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendResponse proto.InternalMessageInfo

func (m *SendResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type DummyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DummyRequest) Reset()         { *m = DummyRequest{} }
func (m *DummyRequest) String() string { return proto.CompactTextString(m) }
func (*DummyRequest) ProtoMessage()    {}
func (*DummyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bd400d4a2b5e8aa, []int{5}
}

func (m *DummyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DummyRequest.Unmarshal(m, b)
}
func (m *DummyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DummyRequest.Marshal(b, m, deterministic)
}
func (m *DummyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DummyRequest.Merge(m, src)
}
func (m *DummyRequest) XXX_Size() int {
	return xxx_messageInfo_DummyRequest.Size(m)
}
func (m *DummyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DummyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DummyRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AnalyzerConfigRequest)(nil), "service.AnalyzerConfigRequest")
	proto.RegisterType((*AnalyzerConfigResponse)(nil), "service.AnalyzerConfigResponse")
	proto.RegisterType((*InfoNodesMessage)(nil), "service.InfoNodesMessage")
	proto.RegisterType((*DiagnosticNodeMessage)(nil), "service.DiagnosticNodeMessage")
	proto.RegisterType((*SendResponse)(nil), "service.SendResponse")
	proto.RegisterType((*DummyRequest)(nil), "service.DummyRequest")
}

func init() { proto.RegisterFile("analyzerservice.proto", fileDescriptor_8bd400d4a2b5e8aa) }

var fileDescriptor_8bd400d4a2b5e8aa = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xf5, 0xd6, 0x2a, 0x25, 0xd3, 0x92, 0xb6, 0x2b, 0x5c, 0x8c, 0x0f, 0xc5, 0xda, 0x03, 0xf2,
	0xc9, 0xa0, 0x70, 0xe0, 0x88, 0x28, 0x81, 0x2a, 0x07, 0x40, 0xda, 0x48, 0x11, 0x57, 0x63, 0x4f,
	0xac, 0x55, 0xe2, 0xdd, 0xc4, 0xbb, 0x46, 0x0a, 0x27, 0xfe, 0x1c, 0xff, 0x0b, 0xd9, 0x8e, 0xbf,
	0x42, 0x40, 0xea, 0xcd, 0x33, 0xf3, 0xde, 0x9b, 0xf1, 0x7b, 0x36, 0x38, 0x91, 0x8c, 0xd6, 0xbb,
	0x9f, 0x98, 0x6b, 0xcc, 0x7f, 0x88, 0x18, 0xc3, 0x4d, 0xae, 0x8c, 0xa2, 0x67, 0xfb, 0xd2, 0xbb,
	0x4c, 0x22, 0x13, 0x65, 0x2a, 0xc1, 0x75, 0x3d, 0x61, 0x6f, 0xc1, 0x79, 0xbf, 0xa7, 0x7c, 0x50,
	0x72, 0x29, 0x52, 0x8e, 0xdb, 0x02, 0xb5, 0xa1, 0xb7, 0x00, 0x8d, 0xd6, 0x6c, 0xea, 0x12, 0x9f,
	0x04, 0xa7, 0xbc, 0xd7, 0x61, 0x0b, 0xb8, 0x39, 0x24, 0xea, 0x8d, 0x92, 0x1a, 0xe9, 0x4b, 0x18,
	0x47, 0x83, 0x49, 0xc5, 0x1e, 0xf1, 0x83, 0x2e, 0x7d, 0x0a, 0xa7, 0x46, 0xad, 0x50, 0xba, 0x27,
	0x3e, 0x09, 0x6c, 0x5e, 0x17, 0x6c, 0x05, 0x57, 0x33, 0xb9, 0x54, 0x5f, 0x54, 0x82, 0xfa, 0x33,
	0x6a, 0x1d, 0xa5, 0xd8, 0x21, 0x49, 0x0f, 0x49, 0xaf, 0xc0, 0x2e, 0x44, 0x52, 0xb1, 0x47, 0xbc,
	0x7c, 0xa4, 0xaf, 0x60, 0x24, 0xe4, 0x52, 0xc9, 0x92, 0xeb, 0xda, 0xbe, 0x1d, 0x9c, 0x4f, 0xae,
	0xc3, 0xc6, 0x89, 0x46, 0x95, 0x77, 0x18, 0xf6, 0x8b, 0x80, 0x33, 0x15, 0x51, 0x2a, 0x95, 0x36,
	0x22, 0x2e, 0xa7, 0x0f, 0x5d, 0xf9, 0x0e, 0xc6, 0x49, 0x2b, 0x50, 0x8a, 0xba, 0xb6, 0x4f, 0x82,
	0xf3, 0xc9, 0xb3, 0x76, 0xef, 0x50, 0x9f, 0x1f, 0xc0, 0x59, 0x00, 0x17, 0x73, 0x94, 0x49, 0xeb,
	0x9e, 0x0b, 0x67, 0xba, 0x88, 0x63, 0xd4, 0xba, 0x5a, 0xfd, 0x98, 0x37, 0x25, 0x1b, 0xc3, 0xc5,
	0xb4, 0xc8, 0xb2, 0xdd, 0x3e, 0xa1, 0xc9, 0xef, 0x13, 0xb8, 0xac, 0x22, 0xd0, 0x42, 0xcf, 0xeb,
	0x65, 0x74, 0x01, 0xd7, 0xf7, 0x68, 0x86, 0xc1, 0xd0, 0xdb, 0xf6, 0x96, 0xa3, 0x51, 0x7b, 0x2f,
	0xfe, 0x39, 0xaf, 0x6f, 0x62, 0x16, 0xfd, 0x08, 0x4f, 0xca, 0x2b, 0xdb, 0x64, 0xe8, 0xf3, 0xbf,
	0x7c, 0x6d, 0xd2, 0xf2, 0x9c, 0x76, 0xd4, 0x7f, 0x31, 0x66, 0x05, 0x84, 0x7e, 0x05, 0x5a, 0xf6,
	0x86, 0x96, 0xf4, 0xee, 0x3b, 0x9a, 0xc5, 0xff, 0x04, 0xef, 0x80, 0xde, 0xa3, 0x99, 0xab, 0x22,
	0x8f, 0xf1, 0x93, 0x58, 0x63, 0x7d, 0x5c, 0x47, 0xe8, 0x1b, 0xe6, 0x75, 0xdf, 0x42, 0x03, 0x65,
	0xd6, 0x6b, 0x72, 0xe7, 0xc2, 0x8d, 0xca, 0xd3, 0x70, 0x9b, 0x69, 0x93, 0x87, 0x69, 0xbe, 0x89,
	0x1b, 0xd8, 0x37, 0xeb, 0xfb, 0xa3, 0xea, 0x2f, 0x79, 0xf3, 0x27, 0x00, 0x00, 0xff, 0xff, 0x2e,
	0x37, 0x55, 0x7a, 0x58, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AnalysisServiceClient is the client API for AnalysisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnalysisServiceClient interface {
	GetAnalyzerConfig(ctx context.Context, in *AnalyzerConfigRequest, opts ...grpc.CallOption) (*AnalyzerConfigResponse, error)
	SendInfoNodes(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_SendInfoNodesClient, error)
	SendDiagnosticNode(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_SendDiagnosticNodeClient, error)
	GetSourceFileNodes(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (AnalysisService_GetSourceFileNodesClient, error)
}

type analysisServiceClient struct {
	cc *grpc.ClientConn
}

func NewAnalysisServiceClient(cc *grpc.ClientConn) AnalysisServiceClient {
	return &analysisServiceClient{cc}
}

func (c *analysisServiceClient) GetAnalyzerConfig(ctx context.Context, in *AnalyzerConfigRequest, opts ...grpc.CallOption) (*AnalyzerConfigResponse, error) {
	out := new(AnalyzerConfigResponse)
	err := c.cc.Invoke(ctx, "/service.AnalysisService/GetAnalyzerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisServiceClient) SendInfoNodes(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_SendInfoNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnalysisService_serviceDesc.Streams[0], "/service.AnalysisService/SendInfoNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &analysisServiceSendInfoNodesClient{stream}
	return x, nil
}

type AnalysisService_SendInfoNodesClient interface {
	Send(*InfoNodesMessage) error
	CloseAndRecv() (*SendResponse, error)
	grpc.ClientStream
}

type analysisServiceSendInfoNodesClient struct {
	grpc.ClientStream
}

func (x *analysisServiceSendInfoNodesClient) Send(m *InfoNodesMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *analysisServiceSendInfoNodesClient) CloseAndRecv() (*SendResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *analysisServiceClient) SendDiagnosticNode(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_SendDiagnosticNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnalysisService_serviceDesc.Streams[1], "/service.AnalysisService/SendDiagnosticNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &analysisServiceSendDiagnosticNodeClient{stream}
	return x, nil
}

type AnalysisService_SendDiagnosticNodeClient interface {
	Send(*DiagnosticNodeMessage) error
	CloseAndRecv() (*SendResponse, error)
	grpc.ClientStream
}

type analysisServiceSendDiagnosticNodeClient struct {
	grpc.ClientStream
}

func (x *analysisServiceSendDiagnosticNodeClient) Send(m *DiagnosticNodeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *analysisServiceSendDiagnosticNodeClient) CloseAndRecv() (*SendResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *analysisServiceClient) GetSourceFileNodes(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (AnalysisService_GetSourceFileNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnalysisService_serviceDesc.Streams[2], "/service.AnalysisService/GetSourceFileNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &analysisServiceGetSourceFileNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnalysisService_GetSourceFileNodesClient interface {
	Recv() (*FileNode, error)
	grpc.ClientStream
}

type analysisServiceGetSourceFileNodesClient struct {
	grpc.ClientStream
}

func (x *analysisServiceGetSourceFileNodesClient) Recv() (*FileNode, error) {
	m := new(FileNode)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnalysisServiceServer is the server API for AnalysisService service.
type AnalysisServiceServer interface {
	GetAnalyzerConfig(context.Context, *AnalyzerConfigRequest) (*AnalyzerConfigResponse, error)
	SendInfoNodes(AnalysisService_SendInfoNodesServer) error
	SendDiagnosticNode(AnalysisService_SendDiagnosticNodeServer) error
	GetSourceFileNodes(*DummyRequest, AnalysisService_GetSourceFileNodesServer) error
}

// UnimplementedAnalysisServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAnalysisServiceServer struct {
}

func (*UnimplementedAnalysisServiceServer) GetAnalyzerConfig(ctx context.Context, req *AnalyzerConfigRequest) (*AnalyzerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalyzerConfig not implemented")
}
func (*UnimplementedAnalysisServiceServer) SendInfoNodes(srv AnalysisService_SendInfoNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method SendInfoNodes not implemented")
}
func (*UnimplementedAnalysisServiceServer) SendDiagnosticNode(srv AnalysisService_SendDiagnosticNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method SendDiagnosticNode not implemented")
}
func (*UnimplementedAnalysisServiceServer) GetSourceFileNodes(req *DummyRequest, srv AnalysisService_GetSourceFileNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSourceFileNodes not implemented")
}

func RegisterAnalysisServiceServer(s *grpc.Server, srv AnalysisServiceServer) {
	s.RegisterService(&_AnalysisService_serviceDesc, srv)
}

func _AnalysisService_GetAnalyzerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServiceServer).GetAnalyzerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AnalysisService/GetAnalyzerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServiceServer).GetAnalyzerConfig(ctx, req.(*AnalyzerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisService_SendInfoNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnalysisServiceServer).SendInfoNodes(&analysisServiceSendInfoNodesServer{stream})
}

type AnalysisService_SendInfoNodesServer interface {
	SendAndClose(*SendResponse) error
	Recv() (*InfoNodesMessage, error)
	grpc.ServerStream
}

type analysisServiceSendInfoNodesServer struct {
	grpc.ServerStream
}

func (x *analysisServiceSendInfoNodesServer) SendAndClose(m *SendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *analysisServiceSendInfoNodesServer) Recv() (*InfoNodesMessage, error) {
	m := new(InfoNodesMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AnalysisService_SendDiagnosticNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnalysisServiceServer).SendDiagnosticNode(&analysisServiceSendDiagnosticNodeServer{stream})
}

type AnalysisService_SendDiagnosticNodeServer interface {
	SendAndClose(*SendResponse) error
	Recv() (*DiagnosticNodeMessage, error)
	grpc.ServerStream
}

type analysisServiceSendDiagnosticNodeServer struct {
	grpc.ServerStream
}

func (x *analysisServiceSendDiagnosticNodeServer) SendAndClose(m *SendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *analysisServiceSendDiagnosticNodeServer) Recv() (*DiagnosticNodeMessage, error) {
	m := new(DiagnosticNodeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AnalysisService_GetSourceFileNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DummyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnalysisServiceServer).GetSourceFileNodes(m, &analysisServiceGetSourceFileNodesServer{stream})
}

type AnalysisService_GetSourceFileNodesServer interface {
	Send(*FileNode) error
	grpc.ServerStream
}

type analysisServiceGetSourceFileNodesServer struct {
	grpc.ServerStream
}

func (x *analysisServiceGetSourceFileNodesServer) Send(m *FileNode) error {
	return x.ServerStream.SendMsg(m)
}

var _AnalysisService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.AnalysisService",
	HandlerType: (*AnalysisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnalyzerConfig",
			Handler:    _AnalysisService_GetAnalyzerConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendInfoNodes",
			Handler:       _AnalysisService_SendInfoNodes_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendDiagnosticNode",
			Handler:       _AnalysisService_SendDiagnosticNode_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetSourceFileNodes",
			Handler:       _AnalysisService_GetSourceFileNodes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "analyzerservice.proto",
}
